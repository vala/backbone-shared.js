// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Backbone.SharedModel = (function(_super) {

    __extends(SharedModel, _super);

    function SharedModel(attributes, options) {
      SharedModel.__super__.constructor.call(this, attributes, options);
      this.doc = options != null ? options.doc : void 0;
      if (!this.collection) {
        this.initializeSharing();
      }
    }

    SharedModel.prototype.initializeSharing = function() {
      var _this = this;
      if (this.collection) {
        this.doc = this.collection.doc;
      }
      if (this.sharedCollections) {
        _.each(this.sharedCollections, function(collectionKey) {
          var _ref;
          return (_ref = _this[collectionKey]) != null ? _ref.initializeSharing({
            parent: _this,
            doc: _this.doc
          }) : void 0;
        });
      }
      if (this.sharedAttributes) {
        _.each(this.sharedAttributesKeys, function(attr) {
          return _this.on("change:" + attr, function(model, value) {
            return _this.updateSharedAttr(attr, _this._previousAttributes[attr], value);
          });
        });
      }
      return this.on("destroy", this.destroyed, this);
    };

    SharedModel.prototype.sharePath = function() {
      var _ref;
      return ((_ref = this.collection) != null ? _ref.sharePath().concat([this.index]) : void 0) || [];
    };

    SharedModel.prototype.subDoc = function() {
      return this.doc.at(this.sharePath());
    };

    SharedModel.prototype.attrSubdoc = function(attr) {
      return this.subDoc().concat([attr]);
    };

    SharedModel.prototype.sharedAttributes = function() {
      return _.pick(this.attributes, this.sharedAttributesKeys);
    };

    SharedModel.prototype.updateSharedAttr = function(attr, old_value, value) {
      return this.attrSubdoc(attr).set(value);
    };

    SharedModel.prototype.destroyed = function(model, coll, options) {
      if (!(options != null ? options.fromSharedOp : void 0)) {
        return this.subDoc().remove();
      }
    };

    SharedModel.prototype.applySharedAction = function(actions) {
      var _this = this;
      return _.each(actions, function(action) {
        if (action.li) {
          _this.insertModel(action);
        }
        if (action.oi) {
          _this.setAttributeOrCollection(action);
        }
        if (action.ld) {
          return _this.destroyModel(action);
        }
      });
    };

    SharedModel.prototype.resourceAt = function(path) {
      var aux,
        _this = this;
      aux = function(res, i) {
        if (_.isNumber(i)) {
          return res.models[i];
        } else {
          return res[i];
        }
      };
      return _.reduce(path, aux, this);
    };

    SharedModel.prototype.insertModel = function(action) {
      var coll;
      coll = this.resourceAt(_.initial(action.p));
      return coll.add(action.li, {
        fromSharedOp: true
      });
    };

    SharedModel.prototype.destroyModel = function(action) {
      var model;
      model = this.resourceAt(action.p);
      return model.destroy({
        fromSharedOp: true
      });
    };

    SharedModel.prototype.setAttributeOrCollection = function(action) {
      var coll, key, target;
      target = this.resourceAt(_.initial(action.p));
      key = _.last(action.p);
      if ((coll = target[key]) && _.contains(target.sharedCollections, key)) {
        return coll.reset(action.oi, {
          silent: false,
          fromSharedOp: true
        });
      } else {
        return target.set(key, action.oi);
      }
    };

    return SharedModel;

  })(Backbone.Model);

  Backbone.SharedCollection = (function(_super) {

    __extends(SharedCollection, _super);

    SharedCollection.prototype.path = null;

    function SharedCollection(models, options) {
      var _this = this;
      SharedCollection.__super__.constructor.call(this, models, options);
      this.on("add destroy", function() {
        return _this.processIndexes();
      });
      this.on("reset", function() {
        return _this.setDoc();
      });
    }

    SharedCollection.prototype.initializeSharing = function(options) {
      var isNewCollection,
        _this = this;
      this.on("add", this.triggerSharedAdd, this);
      this.parent = options.parent;
      this.setDoc(options.doc);
      this.processIndexes();
      isNewCollection = !this.subDoc().get();
      return _.each(this.models, function(model) {
        model.initializeSharing();
        if (isNewCollection) {
          return _this.modelAdded(model);
        }
      });
    };

    SharedCollection.prototype.subDoc = function() {
      return this.doc.at(this.sharePath());
    };

    SharedCollection.prototype.setDoc = function(doc) {
      var sharePath;
      if (doc == null) {
        doc = null;
      }
      if (doc) {
        this.doc = doc;
      }
      try {
        this.subDoc().get();
        sharePath = this.sharePath().join('-');
        if (this.listening !== sharePath) {
          return this.listening = sharePath;
        }
      } catch (_error) {}
    };

    SharedCollection.prototype.sharePath = function() {
      return this.parent.sharePath().concat([this.path]);
    };

    SharedCollection.prototype.processIndexes = function() {
      var _this = this;
      return this.each(function(model, index) {
        model.index = index;
        return model.trigger("indexed");
      });
    };

    SharedCollection.prototype.modelAdded = function(model) {
      if (this.subDoc().get() === void 0) {
        this.subDoc().set([model.sharedAttributes()]);
        return this.setDoc();
      } else {
        return this.subDoc().push(model.sharedAttributes());
      }
    };

    SharedCollection.prototype.triggerSharedAdd = function(model, coll, options) {
      if (!(options && options.fromSharedOp)) {
        this.modelAdded(model);
      }
      return model.initializeSharing();
    };

    return SharedCollection;

  })(Backbone.Collection);

}).call(this);
