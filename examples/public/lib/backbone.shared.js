// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Backbone.SharedModel = (function(_super) {

    __extends(SharedModel, _super);

    function SharedModel(attributes, options) {
      var _this = this;
      SharedModel.__super__.constructor.call(this, attributes, options);
      console.log(attributes, options);
      _.each(this.sharedAttributes, function(attr) {
        return _this.on("change:" + attr, function(model, value) {
          return _this.submitSharedAttr(attr, _this._previousAttributes[attr], value);
        });
      });
    }

    SharedModel.prototype.updatePath = function() {
      if (this.collection) {
        return this.collection.updatePath().concat([this.get('index')]);
      } else {
        return [];
      }
    };

    SharedModel.prototype.submitSharedAttr = function(attr, old_value, value) {
      return console.log(this.updatePath().concat([attr]));
    };

    return SharedModel;

  })(Backbone.Model);

  Backbone.SharedCollection = (function(_super) {

    __extends(SharedCollection, _super);

    SharedCollection.prototype.path = null;

    function SharedCollection(models, options) {
      var _this = this;
      this.on("reset", function() {
        console.log("Reset !");
        return _this.models.each(function(model, index) {
          return model.index = index;
        });
      });
      SharedCollection.__super__.constructor.call(this, models, options);
    }

    SharedCollection.prototype.updatePath = function() {
      return this.parent.updatePath().concat([this.path]);
    };

    SharedCollection.prototype.createChildren = function(key, array, klass) {
      var _this = this;
      return this[key] = _.map(array, function(item, index) {
        return _this.instanciateChildren(klass, item, {
          index: index,
          collection: _this
        });
      });
    };

    SharedCollection.prototype.instanciateChildren = function(klass, attributes, options) {
      var f, o;
      f = function() {};
      f.prototype = klass.prototype;
      o = new f();
      klass.call(o, attributes, options);
      o.constructor = klass;
      return o;
    };

    return SharedCollection;

  })(Backbone.Collection);

}).call(this);
