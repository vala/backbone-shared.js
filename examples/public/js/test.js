// Generated by CoffeeScript 1.3.3
(function() {
  var Clip, ClipCollection, Project, ProjectView, Track, TrackCollection, TrackView,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Project = (function(_super) {

    __extends(Project, _super);

    function Project() {
      return Project.__super__.constructor.apply(this, arguments);
    }

    Project.prototype.sharedAttributesKeys = ['title'];

    Project.prototype.initialize = function(project, options) {
      return this.tracks = new TrackCollection(project.tracks, {
        parent: this,
        doc: options.doc
      });
    };

    return Project;

  })(Backbone.SharedModel);

  Track = (function(_super) {

    __extends(Track, _super);

    function Track() {
      return Track.__super__.constructor.apply(this, arguments);
    }

    Track.prototype.sharedAttributesKeys = ['title'];

    Track.prototype.initialize = function(track, options) {};

    return Track;

  })(Backbone.SharedModel);

  Clip = (function(_super) {

    __extends(Clip, _super);

    function Clip() {
      return Clip.__super__.constructor.apply(this, arguments);
    }

    Clip.prototype.sharedAttributesKeys = ['position'];

    Clip.prototype.initialize = function(clip, option) {};

    return Clip;

  })(Backbone.SharedModel);

  TrackCollection = (function(_super) {

    __extends(TrackCollection, _super);

    function TrackCollection() {
      return TrackCollection.__super__.constructor.apply(this, arguments);
    }

    TrackCollection.prototype.path = 'tracks';

    TrackCollection.prototype.model = Track;

    return TrackCollection;

  })(Backbone.SharedCollection);

  ClipCollection = (function(_super) {

    __extends(ClipCollection, _super);

    function ClipCollection() {
      return ClipCollection.__super__.constructor.apply(this, arguments);
    }

    ClipCollection.prototype.path = 'clips';

    ClipCollection.prototype.model = Clip;

    return ClipCollection;

  })(Backbone.SharedCollection);

  ProjectView = (function(_super) {

    __extends(ProjectView, _super);

    function ProjectView() {
      return ProjectView.__super__.constructor.apply(this, arguments);
    }

    ProjectView.prototype.el = $('#project');

    ProjectView.prototype.events = {
      'keyup .project-title': 'updateTitle'
    };

    ProjectView.prototype.created = false;

    ProjectView.prototype.template = _.template("    <input type='text' name='title' value='<%= title %>' class='project-title'>  ");

    ProjectView.prototype.initialize = function() {
      var _this = this;
      this.model = this.options.model;
      this.model.on('change:title', this.titleChanged, this);
      this.tracks = [];
      _.each(this.model.tracks.models, function(track) {
        return _this.trackAdded(track);
      });
      $('#add-track-btn').on('click', function() {
        return _this.addTrack();
      });
      return this.model.tracks.on("add", function(track) {
        return _this.trackAdded(track);
      });
    };

    ProjectView.prototype.render = function() {
      var _this = this;
      this.$el.html(this.template(this.model.attributes));
      if (!this.created) {
        _.each(this.tracks, function(track) {
          return track.render(_this);
        });
        return this.created = true;
      }
    };

    ProjectView.prototype.titleChanged = function(model, title) {
      return this.$el.find(".project-title").val(title);
    };

    ProjectView.prototype.updateTitle = function(e) {
      return this.model.set({
        title: e.currentTarget.value
      });
    };

    ProjectView.prototype.addTrack = function() {
      return this.model.tracks.add([
        {
          title: "New track"
        }
      ]);
    };

    ProjectView.prototype.trackAdded = function(track) {
      var view;
      view = new TrackView({
        model: track
      });
      this.tracks.push(view);
      if (this.created) {
        return view.render(this);
      }
    };

    return ProjectView;

  })(Backbone.View);

  TrackView = (function(_super) {

    __extends(TrackView, _super);

    function TrackView() {
      return TrackView.__super__.constructor.apply(this, arguments);
    }

    TrackView.prototype["class"] = 'track';

    TrackView.prototype.appended = false;

    TrackView.prototype.template = _.template("    <input type='text' name='tracks[title][]' value='<%= title %>' class='track-title'>    <a href='#' class='delete-track-btn'>Delete</a>    <br>  ");

    TrackView.prototype.events = {
      'keyup .track-title': 'updateTitle',
      'click .delete-track-btn': 'destroyTrack'
    };

    TrackView.prototype.initialize = function() {
      var _this = this;
      this.model = this.options.model;
      this.container = $('#tracks');
      this.model.on('change:title', this.titleChanged, this);
      return this.model.on('destroy', function() {
        return _this.cleanView();
      });
    };

    TrackView.prototype.render = function() {
      if (!this.appended) {
        this.$el.appendTo(this.container);
        this.appended = true;
      }
      return this.$el.html(this.template(this.model.attributes));
    };

    TrackView.prototype.titleChanged = function(model, title) {
      return this.$el.find(".track-title").val(title);
    };

    TrackView.prototype.updateTitle = function(e) {
      return this.model.set({
        title: e.currentTarget.value
      });
    };

    TrackView.prototype.destroyTrack = function(e) {
      return this.model.destroy();
    };

    TrackView.prototype.cleanView = function() {
      return this.$el.remove();
    };

    return TrackView;

  })(Backbone.View);

  window.Project = Project;

  window.ProjectView = ProjectView;

}).call(this);
