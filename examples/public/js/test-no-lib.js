// Generated by CoffeeScript 1.3.3
(function() {
  var Clip, ClipCollection, ClipView, Project, ProjectView, Track, TrackCollection, TrackView,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Project = (function(_super) {

    __extends(Project, _super);

    function Project() {
      return Project.__super__.constructor.apply(this, arguments);
    }

    Project.prototype.sharedAttributesKeys = ['title'];

    Project.prototype.sharedCollection = ['tracks'];

    Project.prototype.initialize = function(project, options) {
      this.subdoc = options.subdoc;
      return this.tracks = new TrackCollection(project.tracks, {
        subdoc: this.subdoc
      });
    };

    return Project;

  })(Backbone.Model);

  Track = (function(_super) {

    __extends(Track, _super);

    function Track() {
      return Track.__super__.constructor.apply(this, arguments);
    }

    Track.prototype.sharedAttributesKeys = ['title'];

    Track.prototype.sharedCollections = ['clips'];

    Track.prototype.sharedAttributes = function() {
      return _.pick(this.attributes, this.sharedAttributesKeys);
    };

    Track.prototype.initialize = function(track, options) {
      this.index = options.collection.getNextIndex();
      this.subdoc = options.collection.subdoc.at(this.index);
      if (!track.clips) {
        this.subdoc.set({});
      }
      return this.clips = new ClipCollection(track.clips, {
        subdoc: this.subdoc
      });
    };

    return Track;

  })(Backbone.Model);

  Clip = (function(_super) {

    __extends(Clip, _super);

    function Clip() {
      return Clip.__super__.constructor.apply(this, arguments);
    }

    Clip.prototype.sharedAttributesKeys = ['position'];

    Clip.prototype.sharedAttributes = function() {
      return _.pick(this.attributes, this.sharedAttributesKeys);
    };

    Clip.prototype.initialise = function(clip, options) {
      this.index = options.collection.getNextIndex();
      return this.subdoc = options.collection.subdoc.at(this.index);
    };

    return Clip;

  })(Backbone.Model);

  TrackCollection = (function(_super) {

    __extends(TrackCollection, _super);

    function TrackCollection() {
      return TrackCollection.__super__.constructor.apply(this, arguments);
    }

    TrackCollection.prototype.path = 'tracks';

    TrackCollection.prototype.model = Track;

    TrackCollection.prototype.getNextIndex = function() {
      return this.currentIndex++;
    };

    TrackCollection.prototype.initialize = function(models, options) {
      var _this = this;
      this.currentIndex = 0;
      this.subdoc = options.subdoc.at("tracks");
      console.log(this.subdoc);
      if (!this.subdoc.get()) {
        this.subdoc.set([]);
      }
      this.subdoc.on("child op", function(path, op) {
        return console.log("TrackCollection <- child op:", path, op);
      });
      return this.on("add", this.trackAdded, this);
    };

    TrackCollection.prototype.trackAdded = function(model, collection, options) {
      console.log("TrackCollection#trackAdded :", model, collection, options);
      return this.subdoc.push(model.sharedAttributes());
    };

    return TrackCollection;

  })(Backbone.Collection);

  ClipCollection = (function(_super) {

    __extends(ClipCollection, _super);

    function ClipCollection() {
      return ClipCollection.__super__.constructor.apply(this, arguments);
    }

    ClipCollection.prototype.path = 'clips';

    ClipCollection.prototype.model = Clip;

    ClipCollection.prototype.getNextIndex = function() {
      return this.currentIndex++;
    };

    ClipCollection.prototype.initialize = function(models, options) {
      var _this = this;
      this.currentIndex = 0;
      this.subdoc = options.subdoc.at("clips");
      if (!this.subdoc.get()) {
        this.subdoc.set([]);
      }
      this.subdoc.on("child op", function(path, op) {
        return console.log("ClipCollection <- child op:", path, op);
      });
      return this.on("add", this.clipAdded, this);
    };

    ClipCollection.prototype.clipAdded = function(model, collection, options) {
      console.log("ClipCollection#clipAdded :", model, collection, options);
      return this.subdoc.push(model.sharedAttributes());
    };

    return ClipCollection;

  })(Backbone.Collection);

  ProjectView = (function(_super) {

    __extends(ProjectView, _super);

    function ProjectView() {
      return ProjectView.__super__.constructor.apply(this, arguments);
    }

    ProjectView.prototype.el = $('#project');

    ProjectView.prototype.events = {
      'keyup .project-title': 'updateTitle',
      'click .add-track-btn': 'addTrack'
    };

    ProjectView.prototype.created = false;

    ProjectView.prototype.template = _.template("    <h1>Project</h1>    <input type='text' name='title' value='<%= title %>' class='project-title'>    <button class='add-track-btn' type='button'>Add Track</button>    <div class='tracks'></div>  ");

    ProjectView.prototype.initialize = function() {
      var _this = this;
      this.model = this.options.model;
      this.model.on('change:title', this.titleChanged, this);
      return this.model.tracks.on("add", function(track) {
        return _this.trackAdded(track);
      });
    };

    ProjectView.prototype.render = function() {
      this.$el.html(this.template(this.model.attributes));
      this.model.tracks.each(this.trackAdded, this);
      return this;
    };

    ProjectView.prototype.titleChanged = function(model, title) {
      return this.$el.find(".project-title").val(title);
    };

    ProjectView.prototype.updateTitle = function(e) {
      return this.model.set({
        title: e.currentTarget.value
      });
    };

    ProjectView.prototype.addTrack = function() {
      return this.model.tracks.add([
        {
          title: "New track"
        }
      ]);
    };

    ProjectView.prototype.trackAdded = function(track) {
      var view;
      view = new TrackView({
        model: track
      });
      return this.$('.tracks').append(view.render().el);
    };

    return ProjectView;

  })(Backbone.View);

  TrackView = (function(_super) {

    __extends(TrackView, _super);

    function TrackView() {
      return TrackView.__super__.constructor.apply(this, arguments);
    }

    TrackView.prototype["class"] = 'track';

    TrackView.prototype.template = _.template("    <h2>Track</h2>    Title: <input type='text' name='tracks[title][]' value='<%= title %>' class='track-title'>    <a href='#' class='delete-track-btn'>Delete</a>    <button class='add-clip-btn' type='button'>Add Clip</button>    <div class='clips'></div>    <br>  ");

    TrackView.prototype.events = {
      'keyup .track-title': 'updateTitle',
      'click .delete-track-btn': 'destroyTrack',
      'click .add-clip-btn': 'addClip'
    };

    TrackView.prototype.initialize = function() {
      this.container = $('#tracks');
      this.model.on('change:title', this.titleChanged, this);
      this.model.on('destroy', this.cleanView, this);
      return this.model.clips.on("add", this.clipAdded, this);
    };

    TrackView.prototype.render = function() {
      this.$el.html(this.template(this.model.attributes));
      this.model.clips.each(this.clipAdded, this);
      return this;
    };

    TrackView.prototype.titleChanged = function(model, title) {
      return this.$el.find(".track-title").val(title);
    };

    TrackView.prototype.updateTitle = function(e) {
      return this.model.set({
        title: e.currentTarget.value
      });
    };

    TrackView.prototype.destroyTrack = function(e) {
      return this.model.destroy();
    };

    TrackView.prototype.addClip = function(e) {
      return this.model.clips.add({
        position: 0
      });
    };

    TrackView.prototype.clipAdded = function(clip) {
      var view;
      view = new ClipView({
        model: clip
      });
      return this.$('.clips').append(view.render().el);
    };

    TrackView.prototype.cleanView = function() {
      return this.$el.remove();
    };

    return TrackView;

  })(Backbone.View);

  ClipView = (function(_super) {

    __extends(ClipView, _super);

    function ClipView() {
      return ClipView.__super__.constructor.apply(this, arguments);
    }

    ClipView.prototype["class"] = 'clip';

    ClipView.prototype.template = _.template("    Clip :    <input type='number' name='clips[position][]' value='<%= position %>' class='clip-position'>    <a href='#' class='delete-clip-btn'>Delete</a>    <br>  ");

    ClipView.prototype.events = {
      'keyup .clip-position': 'updatePosition',
      'click .delete-clip-btn': 'destroyClip'
    };

    ClipView.prototype.initialize = function() {
      this.model.on('change:position', this.positionChanged, this);
      return this.model.on('destroy', this.cleanView, this);
    };

    ClipView.prototype.render = function(container) {
      this.$el.html(this.template(this.model.attributes));
      return this;
    };

    ClipView.prototype.positionChanged = function(model, position) {
      return this.$('.clip-position').val(position);
    };

    ClipView.prototype.updatePosition = function(e) {
      return this.model.set({
        position: e.currentTarget.value
      });
    };

    ClipView.prototype.destroyClip = function() {
      return this.model.destroy();
    };

    ClipView.prototype.cleanView = function() {
      return this.$el.remove();
    };

    return ClipView;

  })(Backbone.View);

  window.Project = Project;

  window.ProjectView = ProjectView;

}).call(this);
